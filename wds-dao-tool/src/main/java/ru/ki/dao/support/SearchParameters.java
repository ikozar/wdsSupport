/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/dao/support/SearchParameters.p.vm.java
 */
package ru.ki.dao.support;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;
import org.apache.commons.lang3.builder.ToStringBuilder;

import javax.persistence.metamodel.SingularAttribute;
import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.util.*;

import static com.google.common.collect.Lists.newArrayList;

/**
 * The SearchParameters is used to pass search parameters to the DAO layer.
 * 
 * Its usage keeps 'find' method signatures in the DAO/Service layer simple.
 * 
 * A SearchParameters helps you drive your search in the following areas:
 * <ul>
 * <li>Configure the search mode (EQUALS, LIKE, ...)</li>
 * <li>Pagination: it allows you to limit your search results to a specific range.</li>
 * <li>Allow you to specify ORDER BY and ASC/DESC</li>
 * <li>Enable/disable case sensitivity</li>
 * <li>Enable/disable 2d level cache</li>
 * <li>LIKE search against all string values: simply set the searchPattern property</li>
 * <li>Named query: if you set a named query it will be executed. Named queries can be defined in annotation or src/main/resources/META-INF/orm.xml</li>
 * </ul>
 * 
 * Note : All requests are limited to a maximum number of elements to prevent resource exhaustion.
 * 
 * @see GenericDao
 * @see SearchMode
 * @see OrderBy
 */
@XmlAccessorType(XmlAccessType.NONE)
public class SearchParameters implements Serializable {
    static final private long serialVersionUID = 1L;

    public static final SearchParameters GET_ALL = new SearchParameters();

    // named query related
    private String namedQuery;

    @XmlElement
    private List<FilterElement> filterElements;

    @XmlElement
    private List<SelectElement> selectElements;

    @XmlElement
    private List<OrderBy> orders = newArrayList();

    // Pagination
    @XmlElement
    private int maxResults = 500;
    @XmlElement
    private int firstResult = 0;

    // Joins
    private List<SingularAttribute<?, ?>> leftJoinAttributes = newArrayList();

    // technical parameters
    private boolean caseSensitive = false;

    // pattern to match against all strings.
    @XmlTransient
    private String searchPattern;

    // cache
    private boolean cacheable = true;
    private String cacheRegion;

    /**
     * Returns true if a named query has been set, false otherwise. When it returns true, the DAO layer will call the namedQuery.
     */
    public boolean hasNamedQuery() {
        return StringUtils.isNotBlank(namedQuery);
    }

    /**
     * Set the named query to be used by the DAO layer. Null by default.
     */
    public void setNamedQuery(String namedQuery) {
        this.namedQuery = namedQuery;
    }

    /**
     * Fluently set the named query to be used by the DAO layer. Null by default.
     */
    public SearchParameters namedQuery(String namedQuery) {
        setNamedQuery(namedQuery);
        return this;
    }

    /**
     * Return the name of the named query to be used by the DAO layer.
     */
    public String getNamedQuery() {
        return namedQuery;
    }

    /**
     * Set the parameters for the named query.
     */
    public void setParameters(Map<String, Object> parameters) {
        Validate.notNull(parameters, "parameters must not be null");
        for (Map.Entry<String, Object> param : parameters.entrySet()) {
            addParameter(param.getKey(), param.getValue(), RestrictionType.EQ);
        }
    }

    public List<FilterElement> getFilterElements() {
        return filterElements;
    }

    public void setFilterElements(List<FilterElement> filterElements) {
        this.filterElements = filterElements;
    }

    /**
     * Set the parameters for the named query.
     */
    public void addParameter(String name, Object value, RestrictionType operator) {
        Validate.notNull(name, "name must not be null");
        Validate.notNull(value, "value must not be null");
        if (filterElements == null)
            filterElements = new ArrayList<FilterElement>();
        filterElements.add(new FilterElement(name, operator, value));
    }

    public SearchParameters parameter(String name, Object value) {
        addParameter(name, value, RestrictionType.EQ);
        return this;
    }

    public SearchParameters parameter(String name, Object value, RestrictionType operator) {
        addParameter(name, value, operator);
        return this;
    }

    /**
     * The parameters associated with the named query, if any.
     */
    public List<FilterElement> getParameters() {
        return filterElements == null ? Collections.EMPTY_LIST : filterElements;
    }

    public boolean isCustomSelect() {
        return selectElements != null;
    }

    public List<SelectElement> getSelectElements() {
        return selectElements;
    }

    public void setSelectElements(List<SelectElement> selectElements) {
        this.selectElements = selectElements;
    }

    public SelectElement findSelectElementByAlias(String name) {
        for (SelectElement selectElement : selectElements) {
            if (name.equals(selectElement.getAlias()))
                return selectElement;
        }
        return null;
    }

    public SearchParameters select(String fieldName) {
        return select(fieldName, fieldName);
    }

    public SearchParameters select(String fieldName, String alias) {
        if (selectElements == null) {
            selectElements = new ArrayList<SelectElement>();
        }
        selectElements.add(new SelectElement(fieldName, alias));
        return this;
    }

// -----------------------------------
    // Search pattern support
    // -----------------------------------

    /**
     * When it returns true, it indicates to the DAO layer to use the passed searchPattern on all string properties.
     */
    public boolean hasSearchPattern() {
        return StringUtils.isNotBlank(searchPattern);
    }

    /**
     * Set the pattern which may contains wildcards (ex: "e%r%ka" ). The passed searchPattern is used by the DAO layer on all string properties. Null by
     * default.
     */
    public void setSearchPattern(String searchPattern) {
        this.searchPattern = searchPattern;
    }

    /**
     * Fluently set the pattern which may contains wildcards (ex: "e%r%ka" ). The passed searchPattern is used by the DAO layer on all string properties. Null
     * by default.
     */
    public SearchParameters searchPattern(String searchPattern) {
        setSearchPattern(searchPattern);
        return this;
    }

    /**
     * Returns the search pattern to be used by the DAO layer.
     */
    public String getSearchPattern() {
        return searchPattern;
    }

    // -----------------------------------
    // Case sensitiveness support
    // -----------------------------------

    /**
     * Set the case sensitiveness. Defaults to false.
     * 
     * @param caseSensitive
     */
    public void setCaseSensitive(boolean caseSensitive) {
        this.caseSensitive = caseSensitive;
    }

    /**
     * Fluently set the case sensitiveness. Defaults to false.
     * 
     * @param caseSensitive
     */
    public SearchParameters caseSensitive(boolean caseSensitive) {
        setCaseSensitive(caseSensitive);
        return this;
    }

    /**
     * Fluently set the case sensitiveness to true.
     */
    public SearchParameters caseSensitive() {
        setCaseSensitive(true);
        return this;
    }

    /**
     * Fluently set the case sensitiveness to false.
     */
    public SearchParameters caseInsensitive() {
        setCaseSensitive(false);
        return this;
    }

    public boolean isCaseSensitive() {
        return caseSensitive;
    }

    public boolean isCaseInsensitive() {
        return !caseSensitive;
    }

    // -----------------------------------
    // Order by support
    // -----------------------------------

    public boolean hasOrders() {
        return !orders.isEmpty();
    }

    public List<OrderBy> getOrders() {
        return orders;
    }

    public void addOrderBy(String fieldName) {
        Validate.notNull(fieldName, "fieldName must not be null");
        orders.add(new OrderBy(fieldName));
    }

    public void addOrderBy(String fieldName, OrderByDirection direction) {
        Validate.notNull(fieldName, "fieldName must not be null");
        Validate.notNull(direction, "direction must not be null");
        orders.add(new OrderBy(fieldName, direction));
    }

    public void addOrderBy(SingularAttribute<?, ? extends Serializable> attribute) {
        Validate.notNull(attribute, "attribute must not be null");
        orders.add(new OrderBy(attribute));
    }

    public void addOrderBy(SingularAttribute<?, ? extends Serializable> attribute, OrderByDirection direction) {
        Validate.notNull(attribute, "fieldName must not be null");
        Validate.notNull(direction, "direction must not be null");
        orders.add(new OrderBy(attribute, direction));
    }

    public void addOrderBy(OrderBy orderBy) {
        Validate.notNull(orderBy, "orderBy must not be null");
        orders.add(orderBy);
    }

    public SearchParameters orderBy(OrderBy orderBy) {
        addOrderBy(orderBy);
        return this;
    }

    public SearchParameters orderBy(String fieldName) {
        addOrderBy(fieldName);
        return this;
    }

    public SearchParameters orderBy(String fieldName, OrderByDirection direction) {
        addOrderBy(fieldName, direction);
        return this;
    }

    public SearchParameters orderBy(SingularAttribute<?, ? extends Serializable> attribute) {
        addOrderBy(attribute);
        return this;
    }

    public SearchParameters orderBy(SingularAttribute<?, ? extends Serializable> attribute,
            OrderByDirection direction) {
        addOrderBy(attribute, direction);
        return this;
    }

    public void clearOrders() {
        orders.clear();
    }

    // -----------------------------------
    // Pagination support
    // -----------------------------------

    public boolean isPagination() {
        return maxResults > 0;
    }

    /**
     * Set the maximum number of results to retrieve. Pass -1 for no limits.
     */
    public void setMaxResults(int maxResults) {
        this.maxResults = maxResults;
    }

    public SearchParameters maxResults(int maxResults) {
        setMaxResults(maxResults);
        return this;
    }

    public int getMaxResults() {
        return maxResults;
    }

    public SearchParameters noLimit() {
        setMaxResults(-1);
        return this;
    }

    public void setFirstResult(int firstResult) {
        this.firstResult = firstResult;
    }

    public SearchParameters firstResult(int firstResult) {
        setFirstResult(firstResult);
        return this;
    }

    public int getFirstResult() {
        return firstResult;
    }

    // -----------------------------------
    // Caching support
    // -----------------------------------

    /**
     * Default to true.
     */
    public void setCacheable(boolean cacheable) {
        this.cacheable = cacheable;
    }

    public SearchParameters cacheable(boolean cacheable) {
        setCacheable(cacheable);
        return this;
    }

    public boolean isCacheable() {
        return cacheable;
    }

    public boolean hasCacheRegion() {
        return StringUtils.isNotBlank(cacheRegion);
    }

    public void setCacheRegion(String cacheRegion) {
        this.cacheRegion = cacheRegion;
    }

    public SearchParameters cacheRegion(String cacheRegion) {
        setCacheRegion(cacheRegion);
        return this;
    }

    public String getCacheRegion() {
        return cacheRegion;
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }
}