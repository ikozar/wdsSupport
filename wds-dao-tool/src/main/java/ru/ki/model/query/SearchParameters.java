/*
 * (c) Copyright 2005-2013 JAXIO, http://www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend-jpa:src/main/java/project/dao/support/SearchParameters.p.vm.java
 */
package ru.ki.model.query;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;
import org.apache.commons.lang3.builder.ToStringBuilder;

import javax.xml.bind.annotation.*;
import java.io.Serializable;
import java.util.*;

import static com.google.common.collect.Lists.newArrayList;

/**
 * The SearchParameters is used to pass search parameters to the DAO layer.
 * 
 */
@XmlAccessorType(XmlAccessType.NONE)
public class SearchParameters implements Serializable {
    static final private long serialVersionUID = 1L;

    public static final SearchParameters GET_ALL = new SearchParameters();

    @XmlElement
    private List<FilterElement> filters = Collections.EMPTY_LIST;

    @XmlElement
    private List<SelectElement> selects = Collections.EMPTY_LIST;

    @XmlElement
    private List<OrderBy> orders = Collections.EMPTY_LIST;

    private List<String> joins = Collections.EMPTY_LIST;

    // Pagination
    @XmlElement
    private int maxResults = 500;
    @XmlElement
    private int firstResult = 0;

    // cache
    private boolean cacheable = true;
    private String cacheRegion;

    /**
     * Set the parameters for the named query.
     */
    public void setParameters(Map<String, Object> parameters) {
        Validate.notNull(parameters, "parameters must not be null");
        for (Map.Entry<String, Object> param : parameters.entrySet()) {
            addParameter(param.getKey(), param.getValue(), RestrictionType.EQ);
        }
    }

    public List<FilterElement> getFilters() {
        return filters;
    }

    public void setFilters(List<FilterElement> filters) {
        validateMutable();
        this.filters = filters;
    }

    /**
     * Set the parameters for the named query.
     */
    public void addParameter(String name, Object value, RestrictionType operator) {
        validateMutable();
        Validate.notNull(name, "name must not be null");
        Validate.notNull(value, "value must not be null");
        if (filters == Collections.EMPTY_LIST)
            filters = new ArrayList<FilterElement>();
        filters.add(new FilterElement(name, operator, value));
    }

    private void validateMutable() {
        if (this == GET_ALL) {
            throw new RuntimeException("this is SearchParameters.GET_ALL, cannot be changed");
        }
    }

    public SearchParameters parameter(String name, Object value) {
        addParameter(name, value, RestrictionType.EQ);
        return this;
    }

    public SearchParameters parameter(String name, Object value, RestrictionType operator) {
        addParameter(name, value, operator);
        return this;
    }

    public boolean isCustomSelect() {
        return selects != Collections.EMPTY_LIST;
    }

    public List<SelectElement> getSelects() {
        return selects;
    }

    public void setSelects(List<SelectElement> selects) {
        validateMutable();
        this.selects = selects;
    }

    public SelectElement findSelectElementByAlias(String name) {
        for (SelectElement selectElement : selects) {
            if (name.equals(selectElement.getAlias()))
                return selectElement;
        }
        return null;
    }

    public SearchParameters select(String fieldName) {
        return select(fieldName, fieldName);
    }

    public SearchParameters select(String fieldName, String alias) {
        validateMutable();
        if (selects == Collections.EMPTY_LIST) {
            selects = new ArrayList<SelectElement>();
        }
        selects.add(new SelectElement(fieldName, alias));
        return this;
    }

    public boolean hasOrders() {
        return !orders.isEmpty();
    }

    public List<OrderBy> getOrders() {
        return orders;
    }

    public void setOrders(List<OrderBy> orders) {
        this.orders = orders;
    }

    public void addOrderBy(String fieldName) {
        addOrderBy(fieldName, OrderByDirection.ASC);
    }

    public void addOrderBy(String fieldName, OrderByDirection direction) {
        Validate.notNull(fieldName, "field must not be null");
        Validate.notNull(direction, "direction must not be null");
        validateMutable();
        if (orders == Collections.EMPTY_LIST) {
            orders = new ArrayList<OrderBy>();
        }
        orders.add(new OrderBy(fieldName, direction));
    }

    public SearchParameters orderBy(String fieldName) {
        addOrderBy(fieldName);
        return this;
    }

    public SearchParameters orderBy(String fieldName, OrderByDirection direction) {
        addOrderBy(fieldName, direction);
        return this;
    }

    public boolean hasJoins() {
        return !joins.isEmpty();
    }

    public List<String> getJoins() {
        return joins;
    }

    public void setJoins(List<String> joins) {
        this.joins = joins;
    }

    public SearchParameters join(String fieldName) {
        Validate.notNull(fieldName, "field must not be null");
        validateMutable();
        if (joins == Collections.EMPTY_LIST) {
            joins = new ArrayList<String>();
        }
        joins.add(fieldName);
        return this;
    }

    // -----------------------------------
    // Pagination support
    // -----------------------------------

    public boolean isPagination() {
        return maxResults > 0;
    }

    /**
     * Set the maximum number of results to retrieve. Pass -1 for no limits.
     */
    public void setMaxResults(int maxResults) {
        this.maxResults = maxResults;
    }

    public SearchParameters maxResults(int maxResults) {
        setMaxResults(maxResults);
        return this;
    }

    public int getMaxResults() {
        return maxResults;
    }

    public SearchParameters noLimit() {
        setMaxResults(-1);
        return this;
    }

    public void setFirstResult(int firstResult) {
        this.firstResult = firstResult;
    }

    public SearchParameters firstResult(int firstResult) {
        setFirstResult(firstResult);
        return this;
    }

    public int getFirstResult() {
        return firstResult;
    }

    // -----------------------------------
    // Caching support
    // -----------------------------------

    /**
     * Default to true.
     */
    public void setCacheable(boolean cacheable) {
        this.cacheable = cacheable;
    }

    public SearchParameters cacheable(boolean cacheable) {
        setCacheable(cacheable);
        return this;
    }

    public boolean isCacheable() {
        return cacheable;
    }

    public boolean hasCacheRegion() {
        return StringUtils.isNotBlank(cacheRegion);
    }

    public void setCacheRegion(String cacheRegion) {
        this.cacheRegion = cacheRegion;
    }

    public SearchParameters cacheRegion(String cacheRegion) {
        setCacheRegion(cacheRegion);
        return this;
    }

    public String getCacheRegion() {
        return cacheRegion;
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }
}